package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"github.com/entegral/gobox/dynamo"
	"github.com/entegral/officebuddy/types"
)

// Users is the resolver for the Users field.
func (r *mutationResolver) Users(ctx context.Context, input []*types.UserSaver) ([]*types.User, error) {
	ret := []*types.User{}
	for _, u := range input {
		err := u.Put(ctx, &u.User)
		if err != nil {
			return nil, err
		}
		u.UserDetails.MonoLink = *dynamo.NewMonoLink(&u.User)
		err = u.Put(ctx, &u.UserDetails)
		ret = append(ret, &u.User)
	}
	return ret, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, input []*types.UserFinder) ([]*types.User, error) {
	ret := []*types.User{}
	for _, u := range input {
		loaded, err := u.Get(ctx, u)
		if err != nil {
			return nil, err
		}
		if loaded {
			ret = append(ret, &u.User)
		}
	}
	return ret, nil
}

// FirstName is the resolver for the firstName field.
func (r *userResolver) FirstName(ctx context.Context, obj *types.User) (string, error) {
	if obj.Details != nil {
		return obj.Details.FirstName, nil
	}
	details, err := obj.GetDetails(ctx)
	if err != nil {
		return "", err
	}
	if details == nil {
		return "", fmt.Errorf("user details not found")
	}
	return obj.Details.FirstName, nil
}

// LastName is the resolver for the lastName field.
func (r *userResolver) LastName(ctx context.Context, obj *types.User) (string, error) {
	if obj.Details != nil {
		return obj.Details.LastName, nil
	}
	details, err := obj.GetDetails(ctx)
	if err != nil {
		return "", err
	}
	if details == nil {
		return "", fmt.Errorf("user details not found")
	}
	return obj.Details.LastName, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
