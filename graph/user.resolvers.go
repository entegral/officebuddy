package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"github.com/entegral/officebuddy/types"
	"github.com/entegral/toolbox/helpers"
)

// Users is the resolver for the Users field.
func (r *mutationResolver) Users(ctx context.Context, input []*types.UserSaver) ([]*types.User, error) {
	ret := []*types.User{}
	for _, u := range input {
		newUser, err := types.NewUser(ctx, u.GUID, u.Email, u.FirstName, u.LastName)
		if err != nil {
			return nil, err
		}
		_, err = helpers.PutItem(ctx, newUser)
		if err != nil {
			return nil, err
		}
		ret = append(ret, newUser)
	}
	return ret, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, input []*types.UserFinder) ([]*types.User, error) {
	ret := []*types.User{}
	for _, u := range input {
		user := u.User
		if found, err := u.LoadByEmail(ctx); found && err == nil {
			ret = append(ret, &user)
		} else if err != nil {
			return nil, err
		}
	}
	return ret, nil
}

// Admins is the resolver for the admins field.
func (r *queryResolver) Admins(ctx context.Context, groupGUID string) ([]*types.User, error) {
	panic(fmt.Errorf("not implemented: Admins - admins"))
}

// AdminOf is the resolver for the adminOf field.
func (r *userResolver) AdminOf(ctx context.Context, obj *types.User) ([]*types.Office, error) {
	panic(fmt.Errorf("not implemented: AdminOf - adminOf"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
