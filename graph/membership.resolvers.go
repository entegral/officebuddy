package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"time"

	"github.com/entegral/officebuddy/types"
	"github.com/entegral/toolbox/clients"
	"github.com/entegral/toolbox/helpers"
)

// User is the resolver for the User field.
func (r *membershipResolver) User(ctx context.Context, obj *types.Membership) (*types.User, error) {
	if obj.Entity0.Email == "" {
		loaded, err := obj.LoadEntity0(ctx, *clients.GetDefaultClient(ctx))
		if err != nil {
			return nil, err
		}
		if !loaded {
			return nil, nil
		}
	}
	return obj.Entity0, nil
}

// Office is the resolver for the Office field.
func (r *membershipResolver) Office(ctx context.Context, obj *types.Membership) (*types.Office, error) {
	return obj.Entity1, nil
}

// CreatedAt is the resolver for the CreatedAt field.
func (r *membershipResolver) CreatedAt(ctx context.Context, obj *types.Membership) (string, error) {
	return obj.CreatedAt.UTC().Format(time.RFC3339), nil
}

// PutMembership is the resolver for the putMembership field.
func (r *mutationResolver) PutMembership(ctx context.Context, email string, officeGUID string, role types.Role) (*types.Membership, error) {
	membership, err := types.LoadMembership(email, officeGUID, role)
	if err != nil {
		return nil, err
	}
	err = membership.Link(ctx, r.Clients)
	if err != nil {
		return nil, err
	}
	return membership, nil
}

// DeleteMembership is the resolver for the deleteMembership field.
func (r *mutationResolver) DeleteMembership(ctx context.Context, email string, officeGUID string) (bool, error) {
	membership, err := types.LoadMembership(email, officeGUID, types.RoleMember)
	if err != nil {
		return false, err
	}
	err = membership.Unlink(ctx, r.Clients)
	if err != nil {
		return false, err
	}
	return true, nil
}

// Membership returns MembershipResolver implementation.
func (r *Resolver) Membership() MembershipResolver { return &membershipResolver{r} }

type membershipResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) Membership(ctx context.Context, email string, officeGUID string) (*types.Membership, error) {
	membership, err := types.LoadMembership(email, officeGUID, types.RoleMember)
	if err != nil {
		return nil, err
	}
	loaded, err := helpers.GetItem(ctx, membership)
	if err != nil {
		return nil, err
	}
	if !loaded {
		return nil, nil
	}
	return membership, nil
}
func (r *queryResolver) Memberships(ctx context.Context, email *string, officeGUID *string) ([]*types.Membership, error) {
	// if email == nil && officeGUID == nil {
	// 	return nil, errors.New("email or officeGUID must be provided")
	// }
	// if email != nil && *email != "" {
	// 	offices, err := dynamo.FindEntity1Links[*types.User, *types.Office](ctx, *clients.GetDefaultClient(ctx), &types.User{Email: *email})
	// 	if err != nil {
	// 		return nil, err
	// 	}

	// }
	return nil, nil
}
