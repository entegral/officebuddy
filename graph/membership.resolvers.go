package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"errors"
	"time"

	"github.com/entegral/officebuddy/types"
	"github.com/entegral/toolbox/clients"
	"github.com/entegral/toolbox/dynamo"
)

// User is the resolver for the User field.
func (r *membershipResolver) User(ctx context.Context, obj *types.Membership) (*types.User, error) {
	if obj.Entity0.Email == "" {
		loaded, err := obj.LoadEntity0(ctx, *clients.GetDefaultClient(ctx))
		if err != nil {
			return nil, err
		}
		if !loaded {
			return nil, nil
		}
	}
	return obj.Entity0, nil
}

// Office is the resolver for the Office field.
func (r *membershipResolver) Office(ctx context.Context, obj *types.Membership) (*types.Office, error) {
	return obj.Entity1, nil
}

// CreatedAt is the resolver for the CreatedAt field.
func (r *membershipResolver) CreatedAt(ctx context.Context, obj *types.Membership) (string, error) {
	return obj.CreatedAt.UTC().Format(time.RFC3339), nil
}

// PutMembership is the resolver for the putMembership field.
func (r *mutationResolver) PutMembership(ctx context.Context, email string, officeGUID string, role types.Role) (*types.Membership, error) {
	membership, err := types.LoadMembership(email, officeGUID, role)
	if err != nil && !errors.Is(err, dynamo.ErrLinkNotFound{}) {
		return nil, err
	}
	err = membership.Link(ctx, r.Clients)
	if err != nil {
		return nil, err
	}
	return membership, nil
}

// DeleteMembership is the resolver for the deleteMembership field.
func (r *mutationResolver) DeleteMembership(ctx context.Context, email string, officeGUID string) (bool, error) {
	membership, err := types.LoadMembership(email, officeGUID, types.RoleMember)
	if err != nil {
		return false, err
	}
	err = membership.Unlink(ctx, r.Clients)
	if err != nil {
		return false, err
	}
	return true, nil
}

// Membership returns MembershipResolver implementation.
func (r *Resolver) Membership() MembershipResolver { return &membershipResolver{r} }

type membershipResolver struct{ *Resolver }
